#include <stdio.h>
#include <string.h>
#include <sys/unistd.h>
#include <sys/stat.h>
#include <sys/param.h>
#include "esp_wifi.h"
#include "esp_event.h"
#include "esp_log.h"
#include "esp_system.h"
#include "esp_spiffs.h"
#include "esp_netif.h"
#include "esp_err.h"
#include "esp_vfs_fat.h"
#include "nvs_flash.h"
#include "sdkconfig.h"
#include "driver/sdspi_host.h"
#include "driver/spi_common.h"
#include "sdmmc_cmd.h"
#include "soc/soc_caps.h"

// #define PIN_NUM_MISO 2
// #define PIN_NUM_MOSI 7
// #define PIN_NUM_CLK 6
// #define PIN_NUM_CS 1

// #define EXAMPLE_ESP_WIFI_SSID "cjia"
// #define EXAMPLE_ESP_WIFI_PASS "ufo31415962"
// #define EXAMPLE_ESP_MAXIMUM_RETRY 5

// #define SD_MOUNT_POINT "/sdcard"

// sdmmc_host_t host = SDSPI_HOST_DEFAULT();

static const char *TAG = "pdm_rec_example";

// sdmmc_card_t *card;

// uint8_t gImage[2756] = {0};

// static int s_retry_num = 0;

// static EventGroupHandle_t s_wifi_event_group;

// #define WIFI_CONNECTED_BIT BIT0
// #define WIFI_FAIL_BIT BIT1

// #define SCRATCH_BUFSIZE  8192

// typedef struct rest_server_context {
//     char base_path[ESP_VFS_PATH_MAX + 1];
//     char scratch[SCRATCH_BUFSIZE];
// } rest_server_context_t;

// void mount_sdcard(void)
// {
//     esp_err_t ret;
//     // Options for mounting the filesystem.
//     // If format_if_mount_failed is set to true, SD card will be partitioned and
//     // formatted in case when mounting fails.
//     esp_vfs_fat_sdmmc_mount_config_t mount_config = {
//         .format_if_mount_failed = true,
//         .max_files = 5,
//         .allocation_unit_size = 8 * 1024};
//     ESP_LOGI(TAG, "Initializing SD card");

//     spi_bus_config_t bus_cfg = {
//         .mosi_io_num = PIN_NUM_MOSI,
//         .miso_io_num = PIN_NUM_MISO,
//         .sclk_io_num = PIN_NUM_CLK,
//         .quadwp_io_num = -1,
//         .quadhd_io_num = -1,
//         .max_transfer_sz = 4000,
//     };
//     ret = spi_bus_initialize(host.slot, &bus_cfg, SPI_DMA_CH_AUTO);
//     if (ret != ESP_OK)
//     {
//         ESP_LOGE(TAG, "Failed to initialize bus.");
//         return;
//     }

//     // This initializes the slot without card detect (CD) and write protect (WP) signals.
//     // Modify slot_config.gpio_cd and slot_config.gpio_wp if your board has these signals.
//     sdspi_device_config_t slot_config = SDSPI_DEVICE_CONFIG_DEFAULT();
//     slot_config.gpio_cs = PIN_NUM_CS;
//     slot_config.host_id = host.slot;

//     ret = esp_vfs_fat_sdspi_mount(SD_MOUNT_POINT, &host, &slot_config, &mount_config, &card);

//     if (ret != ESP_OK)
//     {
//         if (ret == ESP_FAIL)
//         {
//             ESP_LOGE(TAG, "Failed to mount filesystem.");
//         }
//         else
//         {
//             ESP_LOGE(TAG, "Failed to initialize the card (%s). "
//                           "Make sure SD card lines have pull-up resistors in place.",
//                      esp_err_to_name(ret));
//         }
//         return;
//     }

//     // Card has been initialized, print its properties
//     sdmmc_card_print_info(stdout, card);

//     FILE *f = fopen(SD_MOUNT_POINT "/hello.txt", "w");
//     if (f == NULL)
//     {
//         ESP_LOGE(TAG, "Failed to open file for reading");
//         return;
//     }
//     fputs(TAG, f);
//     fclose(f);
// }

// static void event_handler(void *arg, esp_event_base_t event_base,
//                           int32_t event_id, void *event_data)
// {
//     ESP_LOGI(TAG, "                event_handler                  ");
//     if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_START)
//     {
//         esp_wifi_connect();
//     }
//     else if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_DISCONNECTED)
//     {
//         if (s_retry_num < EXAMPLE_ESP_MAXIMUM_RETRY)
//         {
//             esp_wifi_connect();
//             s_retry_num++;
//             ESP_LOGI(TAG, " etry to connect to the AP");
//         }
//         else
//         {
//             xEventGroupSetBits(s_wifi_event_group, WIFI_FAIL_BIT);
//         }
//         ESP_LOGI(TAG, "connect to the AP fail");
//     }
//     else if (event_base == IP_EVENT && event_id == IP_EVENT_STA_GOT_IP)
//     {
//         ip_event_got_ip_t *event = (ip_event_got_ip_t *)event_data;
//         ESP_LOGI(TAG, "got ip:" IPSTR, IP2STR(&event->ip_info.ip));
//         s_retry_num = 0;
//         xEventGroupSetBits(s_wifi_event_group, WIFI_CONNECTED_BIT);
//     }
// }

// void wifi_connent()
// {
//     s_wifi_event_group = xEventGroupCreate();
//     esp_netif_create_default_wifi_sta();
//     wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
//     ESP_ERROR_CHECK(esp_wifi_init(&cfg));

//     esp_event_handler_instance_t instance_any_id;
//     esp_event_handler_instance_t instance_got_ip;
//     ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT,
//                                                         ESP_EVENT_ANY_ID,
//                                                         &event_handler,
//                                                         NULL,
//                                                         &instance_any_id));
//     ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT,
//                                                         IP_EVENT_STA_GOT_IP,
//                                                         &event_handler,
//                                                         NULL,
//                                                         &instance_got_ip));

//     wifi_config_t wifi_config = {
//         .sta = {
//             .ssid = EXAMPLE_ESP_WIFI_SSID,
//             .password = EXAMPLE_ESP_WIFI_PASS,
//             /* Setting a password implies station will connect to all security modes including WEP/WPA.
//              * However these modes are deprecated and not advisable to be used. Incase your Access point
//              * doesn't support WPA2, these mode can be enabled by commenting below line */
//             .threshold.authmode = WIFI_AUTH_WPA2_PSK,
//             .pmf_cfg = {
//                 .capable = true,
//                 .required = false},
//         },
//     };

//     ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));
//     ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &wifi_config));
//     ESP_ERROR_CHECK(esp_wifi_start());

//     EventBits_t bits = xEventGroupWaitBits(s_wifi_event_group,
//                                            WIFI_CONNECTED_BIT | WIFI_FAIL_BIT,
//                                            pdFALSE,
//                                            pdFALSE,
//                                            portMAX_DELAY);

//     if (bits & WIFI_CONNECTED_BIT)
//     {
//         ESP_LOGI(TAG, "connected to ap SSID:%s password:%s",
//                  EXAMPLE_ESP_WIFI_SSID, EXAMPLE_ESP_WIFI_PASS);
//     }
//     else if (bits & WIFI_FAIL_BIT)
//     {
//         ESP_LOGI(TAG, "Failed to connect to SSID:%s, password:%s",
//                  EXAMPLE_ESP_WIFI_SSID, EXAMPLE_ESP_WIFI_PASS);
//     }
//     else
//     {
//         ESP_LOGE(TAG, "UNEXPECTED EVENT");
//     }

//     ESP_ERROR_CHECK(esp_event_handler_instance_unregister(IP_EVENT, IP_EVENT_STA_GOT_IP, instance_got_ip));
//     ESP_ERROR_CHECK(esp_event_handler_instance_unregister(WIFI_EVENT, ESP_EVENT_ANY_ID, instance_any_id));
//     vEventGroupDelete(s_wifi_event_group);
// }


// static esp_err_t rest_common_get_handler(httpd_req_t *req)
// {
//     // const char* resp = "<html><meta charset=\"utf-8\"><body><h1>这是标题 1</h1></body></html>";
//     // httpd_resp_send(req, resp, HTTPD_RESP_USE_STRLEN);
//     // ESP_LOGI(TAG, "rest_common_get_handler");
//     // return ESP_OK;

//     // if (stat(filepath, &file_stat) == -1) {
//     //     /* If file not present on SPIFFS check if URI
//     //      * corresponds to one of the hardcoded paths */
//     //     if (strcmp(filename, "/index.html") == 0) {
//     //         return index_html_get_handler(req);
//     //     } else if (strcmp(filename, "/favicon.ico") == 0) {
//     //         return favicon_get_handler(req);
//     //     }
//     //     ESP_LOGE(TAG, "Failed to stat file : %s", filepath);
//     //     /* Respond with 404 Not Found */
//     //     httpd_resp_send_err(req, HTTPD_404_NOT_FOUND, "File does not exist");
//     //     return ESP_FAIL;
//     // }

//     // int fd = open(filepath, O_RDONLY, 0);
//     return ESP_OK;
// }
// void html_int()
// {
//     // esp_err_t ret = nvs_flash_init();
//     // if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)
//     // {
//     //     ESP_ERROR_CHECK(nvs_flash_erase());
//     //     ret = nvs_flash_init();
//     // }
//     // ESP_ERROR_CHECK(ret);

//     // ESP_ERROR_CHECK(esp_netif_init());
//     // ESP_ERROR_CHECK(esp_event_loop_create_default());

//     // wifi_connent();


//     // rest_server_context_t *rest_context = calloc(1, sizeof(rest_server_context_t));
//     // httpd_handle_t server = NULL;
//     // httpd_config_t config = HTTPD_DEFAULT_CONFIG();
//     // config.uri_match_fn = httpd_uri_match_wildcard;

//     // ESP_LOGI(TAG, "Starting HTTP Server on port: '%d'", config.server_port);
//     // if (httpd_start(&server, &config) != ESP_OK) {
//     //     ESP_LOGE(TAG, "Failed to start file server!");
//     // }

//     // /* URI handler for getting web server files */
//     // httpd_uri_t common_get_uri = {
//     //     .uri = "/*",
//     //     .method = HTTP_GET,
//     //     .handler = rest_common_get_handler,
//     //     .user_ctx = rest_context
//     // };
//     // httpd_register_uri_handler(server, &common_get_uri);
// }

static esp_err_t init_spiffs(void)
{
    esp_vfs_spiffs_conf_t conf = {
        .base_path = "/www",
        .partition_label = NULL,
        .max_files = 5,
        .format_if_mount_failed = false
    };
    esp_err_t ret = esp_vfs_spiffs_register(&conf);

    if (ret != ESP_OK) {
        if (ret == ESP_FAIL) {
            ESP_LOGE(TAG, "Failed to mount or format filesystem");
        } else if (ret == ESP_ERR_NOT_FOUND) {
            ESP_LOGE(TAG, "Failed to find SPIFFS partition");
        } else {
            ESP_LOGE(TAG, "Failed to initialize SPIFFS (%s)", esp_err_to_name(ret));
        }
        return ESP_FAIL;
    }

    size_t total = 0, used = 0;
    ret = esp_spiffs_info(NULL, &total, &used);
    if (ret != ESP_OK) {
        ESP_LOGE(TAG, "Failed to get SPIFFS partition information (%s)", esp_err_to_name(ret));
    } else {
        ESP_LOGI(TAG, "Partition size: total: %d, used: %d", total, used);
    }
    return ESP_OK;
}

void app_main(void)
{

    // ESP_ERROR_CHECK(nvs_flash_init());
    // ESP_ERROR_CHECK(esp_netif_init());
    // ESP_ERROR_CHECK(esp_event_loop_create_default());
    // ESP_ERROR_CHECK(init_spiffs());
    
    // char *filepath="/www/index.html";
    // ESP_LOGI(TAG, "Opening file");

    // int fd = open(filepath, O_RDONLY, 0);
    // if (fd == -1) {
    //     ESP_LOGE(TAG, "Failed to open file : %s", filepath);
    // }

    // char scratch[10240];
    // ssize_t read_bytes;
    //read_bytes = read(fd, scratch, 10240);
   // printf("%d\n %s\n",read_bytes,chunk);
}
